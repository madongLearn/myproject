package com.github.myproject.util.json;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.alibaba.fastjson.TypeReference;import com.alibaba.fastjson.serializer.SerializeConfig;import com.alibaba.fastjson.serializer.SerializerFeature;import com.github.myproject.util.ObjectUtils;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import java.util.List;import java.util.Map;public class JsonUtils {	public final static Gson DEFAULT_GSON = new Gson();	public final static Gson SERIALIZE_NULLS_GSON = new GsonBuilder().serializeNulls().disableHtmlEscaping().create();	private static SerializeConfig config;		static {		config = new SerializeConfig();	}		private static final SerializerFeature[] defaultFeatures = {SerializerFeature.WriteMapNullValue, // 输出空置字段			SerializerFeature.WriteNullListAsEmpty, // list字段如果为null，输出为[]，而不是null			SerializerFeature.WriteNullNumberAsZero, // 数值字段如果为null，输出为0，而不是null			SerializerFeature.WriteNullBooleanAsFalse, // Boolean字段如果为null，输出为false，而不是null			SerializerFeature.WriteNullStringAsEmpty, // 字符类型字段如果为null，输出为""，而不是null			SerializerFeature.DisableCircularReferenceDetect//禁止循环引用	};		/**	 * 对象转JSON	 *	 * @param object	 * @return	 */	public static String toJSONString(Object object) {		return JSON.toJSONString(object, config, defaultFeatures);	}		/**	 * 对象转JSON	 *	 * @param object	 * @param config	 * @param serializerFeatures	 * @return	 */	public static String toJSONString(Object object, SerializeConfig config, SerializerFeature[] serializerFeatures) {		return JSON.toJSONString(object, ObjectUtils.isNull(config) ? JsonUtils.config : config				, ObjectUtils.isEmpty(serializerFeatures) ? JsonUtils.defaultFeatures : defaultFeatures);	}		/**	 * JSON字符串反序列化成JavaBean	 *	 * @param text	 * @return	 */	public static <T> T toBean(String text, Class<T> clazz) {		return JSON.parseObject(text, clazz);	}		/**	 * JSON字符串反序列化成JavaBean	 * @param text	 * @return	 */	public static <T> T toBean(byte[] text, Class<T> clazz) {		return JSON.parseObject(text, clazz);	}		/**	 * JSON字符串反序列化成JavaBean列表	 *	 * @param text	 * @param clazz	 * @param <T>	 * @return	 */	public static <T> List<T> toArray(String text, Class<T> clazz) {		return JSON.parseArray(text, clazz);	}		/**	 * JSON字符串反序列化为泛型类型的JavaBean	 *	 * @param text	 * @param typeReference	 * @param <T>	 * @return	 */	public static <T> T toGenerics(String text, TypeReference<T> typeReference) {		return (T)JSON.parseObject(text,typeReference);	}		/**	 * JSON字符串反序列化为Map	 *	 * @param s	 * @return	 */	public static Map toMap(String s) {		Map m = JSONObject.parseObject(s);		return m;	}}